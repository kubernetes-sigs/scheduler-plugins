/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	v1 "k8s.io/api/core/v1"
)

// ClusterScopedResourceSpecApplyConfiguration represents an declarative configuration of the ClusterScopedResourceSpec type for use
// with apply.
type ClusterScopedResourceSpecApplyConfiguration struct {
	ResourcesFilter map[v1.ResourceName]bool  `json:"resourcesFilter,omitempty"`
	ResourcesScore  map[v1.ResourceName]int64 `json:"resourcesScore,omitempty"`
}

// ClusterScopedResourceSpecApplyConfiguration constructs an declarative configuration of the ClusterScopedResourceSpec type for use with
// apply.
func ClusterScopedResourceSpec() *ClusterScopedResourceSpecApplyConfiguration {
	return &ClusterScopedResourceSpecApplyConfiguration{}
}

// WithResourcesFilter puts the entries into the ResourcesFilter field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the ResourcesFilter field,
// overwriting an existing map entries in ResourcesFilter field with the same key.
func (b *ClusterScopedResourceSpecApplyConfiguration) WithResourcesFilter(entries map[v1.ResourceName]bool) *ClusterScopedResourceSpecApplyConfiguration {
	if b.ResourcesFilter == nil && len(entries) > 0 {
		b.ResourcesFilter = make(map[v1.ResourceName]bool, len(entries))
	}
	for k, v := range entries {
		b.ResourcesFilter[k] = v
	}
	return b
}

// WithResourcesScore puts the entries into the ResourcesScore field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the ResourcesScore field,
// overwriting an existing map entries in ResourcesScore field with the same key.
func (b *ClusterScopedResourceSpecApplyConfiguration) WithResourcesScore(entries map[v1.ResourceName]int64) *ClusterScopedResourceSpecApplyConfiguration {
	if b.ResourcesScore == nil && len(entries) > 0 {
		b.ResourcesScore = make(map[v1.ResourceName]int64, len(entries))
	}
	for k, v := range entries {
		b.ResourcesScore[k] = v
	}
	return b
}
