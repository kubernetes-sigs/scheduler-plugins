/*
Copyright 2022 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// This package imports things required by build scripts, to force `go mod` to see them as dependencies

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/diktyo-io/appgroup-api/pkg/apis/appgroup/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// AppGroupLister helps list AppGroups.
// All objects returned here must be treated as read-only.
type AppGroupLister interface {
	// List lists all AppGroups in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.AppGroup, err error)
	// AppGroups returns an object that can list and get AppGroups.
	AppGroups(namespace string) AppGroupNamespaceLister
	AppGroupListerExpansion
}

// appGroupLister implements the AppGroupLister interface.
type appGroupLister struct {
	indexer cache.Indexer
}

// NewAppGroupLister returns a new AppGroupLister.
func NewAppGroupLister(indexer cache.Indexer) AppGroupLister {
	return &appGroupLister{indexer: indexer}
}

// List lists all AppGroups in the indexer.
func (s *appGroupLister) List(selector labels.Selector) (ret []*v1alpha1.AppGroup, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AppGroup))
	})
	return ret, err
}

// AppGroups returns an object that can list and get AppGroups.
func (s *appGroupLister) AppGroups(namespace string) AppGroupNamespaceLister {
	return appGroupNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// AppGroupNamespaceLister helps list and get AppGroups.
// All objects returned here must be treated as read-only.
type AppGroupNamespaceLister interface {
	// List lists all AppGroups in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.AppGroup, err error)
	// Get retrieves the AppGroup from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.AppGroup, error)
	AppGroupNamespaceListerExpansion
}

// appGroupNamespaceLister implements the AppGroupNamespaceLister
// interface.
type appGroupNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all AppGroups in the indexer for a given namespace.
func (s appGroupNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.AppGroup, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AppGroup))
	})
	return ret, err
}

// Get retrieves the AppGroup from the indexer for a given namespace and name.
func (s appGroupNamespaceLister) Get(name string) (*v1alpha1.AppGroup, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("appgroup"), name)
	}
	return obj.(*v1alpha1.AppGroup), nil
}
